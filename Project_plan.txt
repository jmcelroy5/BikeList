Potential Names: Velove, BikeList

Require that sellers register their bikes on BikeIndex before creating a listing. App asks user for bike serial number from user then gets bike info via BikeIndex API. User provides a few pieces of listing-specific information (asking price, location, etc.)

To-do list:
	- Display all listings in a list - DONE
	- Display all listings on a map - DONE
	- Search filters 
		- material - DONE
		- price - DONE (but could make into a slider)
		- size - DONE (may need improved categories for live site though)
		- handlebar type - DONE
		- # of gears - put it on the listing page
		- search by make/model - 2.0 feature
	- DB optimization stuff: Index listings for search?
	- Airbnbify the design/css, make a navbar - DONE
	- Facebook OAuth for user sign-in - DONE
	- user account management page (delete listings and such) - DONE
	- flesh out individual bike listing page - DONE
	(include map, components, seller photos)
	- redo the listing form map (google - mapbox) - DONE
	- listing form verification - DONE-ish
	- allow user to add favorite bikes! - DONE!

In Progress:
	- Hash search in URL 
	- Make CSS responsive (map goes away, navbar simplifies, fewer rows of bikes, etc)
	^ How to handle modals on smaller screens?
	- 'List bike' leads to login modal when no current user
	- buy custom domain and point it to pythonanywhere url
	- figure out why facebook oauth isnt working on live site (errno 101)
	- handle error: bike/listing already exists
	- fix bug on toggling "search by map move"
	- migrate sqlite to another kind of database for live version?
	- make email optional on form (and make it clear that email will be displayed to buyers)

2.0 Features:
	- anonymous email
	- users can comment / ask seller questions about the bike 
	- edit listings / post back to BikeIndex?! 
	- let a user register on bikeindex through my site when they want to sell instead of requiring that they register beforehand (but this would mean duplicating bikeindex's complicated form...)

Things to learn about:
	- unit testing
	- backbone and underscore
	- js templating (handlebars?)
	- error handling (server responses / client-side display)
	- database dumping and migration

Error cases that will need to be handled:
	- bike is stolen - DONE 
	- bike serial number not found - DONE 
	- If a bike/listing already exists - NEED TO DO THIS!
	- listing form verification: all fields are filled out and in proper data format - DONE-ish

MVP features:

Seller-side:
* Easy sign up - Facebook OAuth
* Link to their Bike Index registration via id or bike serial number - Bike index API
* Listing form: contact info, asking price, location - Leaflet.js
* Listing management: delete/modify listings, add new listing

Buyer-side:
* search for bikes by location 
* see listings on a map and in list form (map and list views side by side)
* filter search by bike attributes
* order by price
* see bike details + the seller’s Facebook profile photo
* Sign in (with Facebook) to see the seller’s contact info
* listing pagination - or load new ones as they scroll down 

Nice-to-have features:

Seller-side:
- Suggest an asking price (will look for a data source for bike resell values)
- Be able to save an (inactive/incomplete) listing for later
- Listing expiration date —> notify seller via email when their listing is about to expire
- Somehow link their listing the bike’s stock photo / specs page on bikebook.io 
- When they delete a listing:
	1) Ask how much they sold it for
	2) Prompt them to change ownership on bikeindex

Buyer-side:
- Detect IP address and automatically center map on user’s location
- Save favorite bike listings

Transactions:
- Users can publicly comment on bike listings and ask the seller questions (use Disqus for this?)
- private messaging between buyers/sellers (this would be awesome but probably a ton of work)
