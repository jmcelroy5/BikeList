from flask import Flask, Blueprint, render_template, request, jsonify, g, flash
from flask import session as flask_session
import datetime
import json
import model
from model import Bike, Listing, User, session
import requests


app = Flask(__name__)
app.secret_key = 'abc123321cba'


# Enable Python Social Auth...

# app.config.update(
#     DEBUG=True,
#     SECRET_KEY='abc123321cba',
#     SOCIAL_AUTH_FACEBOOK_KEY = '1529002184008663',
# 	SOCIAL_AUTH_FACEBOOK_SECRET = '9f424672d92888f9f70aa619643c3d48',
# 	SOCIAL_AUTH_FACEBOOK_SCOPE = ['email'],
#     SOCIAL_AUTH_AUTHENTICATION_BACKENDS = 'social.backends.facebook.FacebookOAuth2',
#     SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/',
#     SOCIAL_AUTH_LOGIN_ERROR_URL = '/',
#     SOCIAL_AUTH_LOGIN_URL = '/',
#     SOCIAL_AUTH_USER_MODEL = 'model.User',
#     SOCIAL_AUTH_UUID_LENGTH = 16,
#     SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True,
#     SOCIAL_AUTH_SLUGIFY_USERNAMES = False,
#     SOCIAL_AUTH_CLEAN_USERNAMES = True,
# )

# from social.apps.flask_app.routes import social_auth
# app.register_blueprint(social_auth)

# from social.apps.flask_app.default.models import init_social
# init_social(app, model.ENGINE) # ?????



# # Flask-Login stuff

# import os
# from flask.ext.login import LoginManager

# app.config.from_object('config')

# # from app import views     (if i had my views separated)

# login_manager = LoginManager()
# login_manager.init_app(app) 

# @login_manager.user_loader
# def load_user(id):
# 	try:
# 		return session.query(User).get(int(id))
# 	except (TypeError, ValueError):
# 		pass


# login view
@app.route("/login")
def login():
	return render_template("login.html",user=g.user)


# Runs on browser refresh. Checks for current user and bike
@app.before_request
def get_current_user():
    current_user = flask_session.get('user', None) 
    if current_user:
	 	g.user = current_user

    bike_id = flask_session.get('bike', None)
    if bike_id:
    	g.bike_id = bike_id

# Make current user available on templates
@app.context_processor
def inject_user():
    try:
        return {'user': g.user}
    except AttributeError:
        return {'user': None}








@app.route("/")
def home_page():
	# Now home route just renders template and all content is generated by javascript
	return render_template("index.html")

@app.route("/get_all_bikes")
def get_all_bikes():
	""" get search results """

	materials = request.args.getlist('materials[]') 		# returns list of names of checkboxes that are checked when form submits
	print "MATERIALS=========", materials
	# materials looks like: [u'Carbon or composite', u'Aluminum']
	handlebars = request.args.getlist('handlebars[]') 		# returns list of names of checkboxes that are checked when form submits
	print "HANDLEBARS=========", handlebars
	min_price = request.args.get('min_price')
	print "MIN_PRICE=========", min_price
	max_price = request.args.get('max_price')
	print "MAX_PRICE=========", max_price

	# Base query for active listings
	query = session.query(Listing, Bike).filter(Listing.bike_id == Bike.id, Listing.post_status=="Active") # Base query

	# Filters
	if materials:	# Filter bikes by specified materials
		query = query.filter(Bike.frame_material.in_(materials))
	if handlebars:
		query = query.filter(Bike.handlebar_type.in_(handlebars))
	if min_price:
		query = query.filter(Listing.asking_price >= min_price)
	if max_price:
		query = query.filter(Listing.asking_price <= max_price)

	# Filters I'll add later... 
	# if size:
	# 	query = query.filter_by(things = foo)
	all_listings = query.all()	# Finish the query

	response = []

	# Building final response object
	for listing, bike in all_listings:
		response.append({'url': "/listing/" + str(bike.id),
						'latitude': listing.latitude, 
						'longitude': listing.longitude,
						'photo': bike.photo,
						'price': listing.asking_price,
						'material': bike.frame_material,
						'title': bike.manufacturer + " " + 
								 bike.frame_model + 
								" ($" + str(listing.asking_price) + ")"})

	return jsonify(response=response)
		
@app.route("/sell")
def index():
	return render_template("getbike.html")

@app.route("/addbike", methods=['POST'])
def add_bike():
	""" Takes bike object from BikeIndex API and adds bike info to db"""

	bike_JSON= request.form.get("bike")	# Get JSON bike object from ajax ({bike: bikedata})
	bike = json.loads(bike_JSON)	# JSON string --> Python dictionary

	# Create new bike instance for bike table
	new_bike = model.Bike()

	# Populate bike attributes
	new_bike.id = bike["id"]	# primary key
	new_bike.serial = bike["serial"]	
	new_bike.size = bike["frame_size"]
	new_bike.manufacturer = bike["manufacturer_name"]
	new_bike.rear_tire_narrow = bike["rear_tire_narrow"] 
	new_bike.type_of_cycle = bike["type_of_cycle"]
	new_bike.bikeindex_url = bike["url"]
	new_bike.photo = bike["photo"]
	new_bike.thumb = bike["thumb"]
	new_bike.title = bike["title"]
	new_bike.frame_model = bike["frame_model"]
	new_bike.year = bike["year"]
	new_bike.paint_description = bike["paint_description"] # None
	new_bike.front_tire_narrow = bike["front_tire_narrow"]

	new_bike.frame_colors = "" 		# breaking frame colors out of list format
	for color in bike["frame_colors"]:
		new_bike.frame_colors += color

	if bike["handlebar_type"] != None:
		new_bike.handlebar_type = bike["handlebar_type"].get("name", None)
	
	if bike["frame_material"] != None:
		new_bike.frame_material = bike["frame_material"].get("name", None)

	if bike["rear_wheel_size"] != None:
		new_bike.rear_wheel_size = bike["rear_wheel_size"].get("name", None)
		new_bike.rear_wheel_size_iso_bsd = bike["rear_wheel_size"].get("iso_bsd", None) 
	
	if bike["front_wheel_size"] != None:
		new_bike.front_wheel_size = bike["front_wheel_size"].get("name", None)	
		new_bike.front_wheel_size_iso_bsd = bike["front_wheel_size"].get("iso_bsd", None)	
	
	if bike["front_gear_type"] != None:
		new_bike.front_gear_type = bike["front_gear_type"].get("name", None)
	
	if bike["rear_gear_type"] != None:
		new_bike.rear_gear_type = bike["rear_gear_type"].get("name", None)

	# Add bike to session and commit changes
	# model.session.add(new_bike)
	# model.session.commit() 

	# Store bike id in flask session (to remember it for listing)
	flask_session["bike"] = bike["id"]

	return "Added bike to database"

@app.route("/list")
def listing_form():
	return render_template("listing_form.html")

@app.route("/addlisting", methods=['POST'])
def add_listing():

	new_listing = model.Listing()

	new_listing.bike_id = flask_session["bike"]	# get bike id from flask session
	new_listing.post_date = datetime.datetime.now()
	new_listing.post_expiration = datetime.datetime.now() + datetime.timedelta(30) # Post expires 30 days from now
	new_listing.post_status = "active"
	new_listing.asking_price = request.form["price"] # FORM
	new_listing.latitude = request.form["latitude"] # FORM
	new_listing.longitude = request.form["longitude"] # FORM
	new_listing.additional_text = request.form["comments"] # FORM
	# also need to tie the listing to the logged-in user

	# model.session.add(new_listing)
	# model.session.commit()
	flash("Your listing has been created.") 

	return str(new_listing.bike_id)

@app.route("/listing/<int:id>") 
def listing_success(id):
	bike = model.session.query(model.Bike).filter_by(id=id).one()
	return render_template("listing.html", bike=bike)

@app.route("/_get_current_user")
def get_current_user():
	return jsonify(bike_id = g.bike_id)

if __name__== "__main__":
	app.run(debug = True)

